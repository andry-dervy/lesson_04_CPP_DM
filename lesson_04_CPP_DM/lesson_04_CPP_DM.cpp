//============================================================================
// Name        : lesson_04_CPP_DM.cpp
// Author      : andry antonenko
// IDE         : Qt Creator 4.14.2 based on Qt 5.15.2
// Description : lesson 04 of the C++: difficult moments course
//============================================================================
#include <QCoreApplication>
#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <string>
#include <optional>
#include <tuple>
#include <vector>
#include <algorithm>
#include <random>
#include <chrono>
#include <memory>
#include <codecvt>
#include <list>
#include <functional>
#include <iterator>
//----------------------------------------------------------------------------
//----------------------------------------------------------------------------
/*
1. Имеется отсортированный массив целых чисел.
Необходимо разработать функцию insert_sorted,
которая принимает вектор и новое число и
вставляет новое число в определенную позицию в векторе,
чтобы упорядоченность контейнера сохранялась.
Реализуйте шаблонную функцию insert_sorted,
которая сможет аналогично работать с любым контейнером,
содержащим любой тип значения.
//*/

void task_1()
{
  std::cout << "Task 1\n" << std::endl;


  std::cout << std::endl;
}
//----------------------------------------------------------------------------
/*
2. Сгенерируйте вектор a, состоящий из 100 вещественный чисел,
представляющий собой значения аналогового сигнала.
На основе этого массива чисел создайте другой вектор целых чисел b,
представляющий цифровой сигнал, в котором будут откинуты дробные части чисел.
Выведите получившиеся массивы чисел.
Посчитайте ошибку, которой обладает цифровой сигнал по сравнению с аналоговым по формуле:
сумма по i=0..N-1(ai - bi)^2,
где:
N - количество элементов в векторе,
a - элемент вектора с дробными числами,
b - элемент вектора с целыми числами
//*/

void task_2()
{
  std::cout << "\nTask 2\n" << std::endl;


  std::cout << std::endl;
}

//----------------------------------------------------------------------------
int main(int argc, char *argv[])
{
  QCoreApplication a(argc, argv);
  //--------------------------------------------------------------------------
  // Task 1
  //*
  task_1();
  //*/
  //--------------------------------------------------------------------------
  // Task 2
  //*
  task_2();
  //*/
  //--------------------------------------------------------------------------
  return a.exec();
}
